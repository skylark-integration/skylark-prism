{"version":3,"sources":["skylark-prism.js"],"names":[],"mappingsfile":"../skylark-prism.js","sourcesContent":["define('skylark-prism/prism',[\r\n  \"skylark-langx-ns\"\r\n],function(skylark) {\r\n\t/* **********************************************\r\n\t     Begin prism-core.js\r\n\t********************************************** */\r\n\r\n\t/// <reference lib=\"WebWorker\"/>\r\n\r\n\tvar _self = {}\r\n\r\n\t/**\r\n\t * Prism: Lightweight, robust, elegant syntax highlighting\r\n\t *\r\n\t * @license MIT <https://opensource.org/licenses/MIT>\r\n\t * @author Lea Verou <https://lea.verou.me>\r\n\t * @namespace\r\n\t * @public\r\n\t */\r\n\tvar Prism = (function (_self) {\r\n\r\n\t\t// Private helper vars\r\n\t\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\r\n\t\tvar uniqueId = 0;\r\n\r\n\t\t// The grammar object for plaintext\r\n\t\tvar plainTextGrammar = {};\r\n\r\n\r\n\t\tvar _ = {\r\n\t\t\t/**\r\n\t\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\r\n\t\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\r\n\t\t\t * additional languages or plugins yourself.\r\n\t\t\t *\r\n\t\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\r\n\t\t\t *\r\n\t\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\r\n\t\t\t * empty Prism object into the global scope before loading the Prism script like this:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * window.Prism = window.Prism || {};\r\n\t\t\t * Prism.manual = true;\r\n\t\t\t * // add a new <script> to load Prism's script\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t * @memberof Prism\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tmanual: _self.Prism && _self.Prism.manual,\r\n\t\t\t/**\r\n\t\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\r\n\t\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\r\n\t\t\t * own worker, you don't want it to do this.\r\n\t\t\t *\r\n\t\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\r\n\t\t\t *\r\n\t\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\r\n\t\t\t * empty Prism object into the global scope before loading the Prism script like this:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * window.Prism = window.Prism || {};\r\n\t\t\t * Prism.disableWorkerMessageHandler = true;\r\n\t\t\t * // Load Prism's script\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t * @memberof Prism\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\r\n\r\n\t\t\t/**\r\n\t\t\t * A namespace for utility methods.\r\n\t\t\t *\r\n\t\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\r\n\t\t\t * change or disappear at any time.\r\n\t\t\t *\r\n\t\t\t * @namespace\r\n\t\t\t * @memberof Prism\r\n\t\t\t */\r\n\t\t\tutil: {\r\n\t\t\t\tencode: function encode(tokens) {\r\n\t\t\t\t\tif (tokens instanceof Token) {\r\n\t\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\r\n\t\t\t\t\t} else if (Array.isArray(tokens)) {\r\n\t\t\t\t\t\treturn tokens.map(encode);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Returns the name of the type of the given value.\r\n\t\t\t\t *\r\n\t\t\t\t * @param {any} o\r\n\t\t\t\t * @returns {string}\r\n\t\t\t\t * @example\r\n\t\t\t\t * type(null)      === 'Null'\r\n\t\t\t\t * type(undefined) === 'Undefined'\r\n\t\t\t\t * type(123)       === 'Number'\r\n\t\t\t\t * type('foo')     === 'String'\r\n\t\t\t\t * type(true)      === 'Boolean'\r\n\t\t\t\t * type([1, 2])    === 'Array'\r\n\t\t\t\t * type({})        === 'Object'\r\n\t\t\t\t * type(String)    === 'Function'\r\n\t\t\t\t * type(/abc+/)    === 'RegExp'\r\n\t\t\t\t */\r\n\t\t\t\ttype: function (o) {\r\n\t\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\r\n\t\t\t\t *\r\n\t\t\t\t * @param {Object} obj\r\n\t\t\t\t * @returns {number}\r\n\t\t\t\t */\r\n\t\t\t\tobjId: function (obj) {\r\n\t\t\t\t\tif (!obj['__id']) {\r\n\t\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn obj['__id'];\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Creates a deep clone of the given object.\r\n\t\t\t\t *\r\n\t\t\t\t * The main intended use of this function is to clone language definitions.\r\n\t\t\t\t *\r\n\t\t\t\t * @param {T} o\r\n\t\t\t\t * @param {Record<number, any>} [visited]\r\n\t\t\t\t * @returns {T}\r\n\t\t\t\t * @template T\r\n\t\t\t\t */\r\n\t\t\t\tclone: function deepClone(o, visited) {\r\n\t\t\t\t\tvisited = visited || {};\r\n\r\n\t\t\t\t\tvar clone; var id;\r\n\t\t\t\t\tswitch (_.util.type(o)) {\r\n\t\t\t\t\t\tcase 'Object':\r\n\t\t\t\t\t\t\tid = _.util.objId(o);\r\n\t\t\t\t\t\t\tif (visited[id]) {\r\n\t\t\t\t\t\t\t\treturn visited[id];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\r\n\t\t\t\t\t\t\tvisited[id] = clone;\r\n\r\n\t\t\t\t\t\t\tfor (var key in o) {\r\n\t\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\r\n\t\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn /** @type {any} */ (clone);\r\n\r\n\t\t\t\t\t\tcase 'Array':\r\n\t\t\t\t\t\t\tid = _.util.objId(o);\r\n\t\t\t\t\t\t\tif (visited[id]) {\r\n\t\t\t\t\t\t\t\treturn visited[id];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tclone = [];\r\n\t\t\t\t\t\t\tvisited[id] = clone;\r\n\r\n\t\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\r\n\t\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\treturn /** @type {any} */ (clone);\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn o;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\r\n\t\t\t\t *\r\n\t\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\r\n\t\t\t\t *\r\n\t\t\t\t * @param {Element} element\r\n\t\t\t\t * @returns {string}\r\n\t\t\t\t */\r\n\t\t\t\tgetLanguage: function (element) {\r\n\t\t\t\t\twhile (element) {\r\n\t\t\t\t\t\tvar m = lang.exec(element.className);\r\n\t\t\t\t\t\tif (m) {\r\n\t\t\t\t\t\t\treturn m[1].toLowerCase();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telement = element.parentElement;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 'none';\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Sets the Prism `language-xxxx` class of the given element.\r\n\t\t\t\t *\r\n\t\t\t\t * @param {Element} element\r\n\t\t\t\t * @param {string} language\r\n\t\t\t\t * @returns {void}\r\n\t\t\t\t */\r\n\t\t\t\tsetLanguage: function (element, language) {\r\n\t\t\t\t\t// remove all `language-xxxx` classes\r\n\t\t\t\t\t// (this might leave behind a leading space)\r\n\t\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\r\n\r\n\t\t\t\t\t// add the new `language-xxxx` class\r\n\t\t\t\t\t// (using `classList` will automatically clean up spaces for us)\r\n\t\t\t\t\telement.classList.add('language-' + language);\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Returns the script element that is currently executing.\r\n\t\t\t\t *\r\n\t\t\t\t * This does __not__ work for line script element.\r\n\t\t\t\t *\r\n\t\t\t\t * @returns {HTMLScriptElement | null}\r\n\t\t\t\t */\r\n\t\t\t\tcurrentScript: function () {\r\n\t\t\t\t\tif (typeof document === 'undefined') {\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\r\n\t\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// IE11 workaround\r\n\t\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\r\n\t\t\t\t\t// this will not work for inline scripts\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tthrow new Error();\r\n\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\r\n\t\t\t\t\t\t// A stack will look like this:\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t\t// Error\r\n\t\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\r\n\t\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\r\n\r\n\t\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\r\n\t\t\t\t\t\tif (src) {\r\n\t\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\r\n\t\t\t\t\t\t\tfor (var i in scripts) {\r\n\t\t\t\t\t\t\t\tif (scripts[i].src == src) {\r\n\t\t\t\t\t\t\t\t\treturn scripts[i];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Returns whether a given class is active for `element`.\r\n\t\t\t\t *\r\n\t\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\r\n\t\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\r\n\t\t\t\t * given class is just the given class with a `no-` prefix.\r\n\t\t\t\t *\r\n\t\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\r\n\t\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\r\n\t\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\r\n\t\t\t\t *\r\n\t\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\r\n\t\t\t\t * version of it, the class is considered active.\r\n\t\t\t\t *\r\n\t\t\t\t * @param {Element} element\r\n\t\t\t\t * @param {string} className\r\n\t\t\t\t * @param {boolean} [defaultActivation=false]\r\n\t\t\t\t * @returns {boolean}\r\n\t\t\t\t */\r\n\t\t\t\tisActive: function (element, className, defaultActivation) {\r\n\t\t\t\t\tvar no = 'no-' + className;\r\n\r\n\t\t\t\t\twhile (element) {\r\n\t\t\t\t\t\tvar classList = element.classList;\r\n\t\t\t\t\t\tif (classList.contains(className)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (classList.contains(no)) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telement = element.parentElement;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn !!defaultActivation;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\r\n\t\t\t *\r\n\t\t\t * @namespace\r\n\t\t\t * @memberof Prism\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tlanguages: {\r\n\t\t\t\t/**\r\n\t\t\t\t * The grammar for plain, unformatted text.\r\n\t\t\t\t */\r\n\t\t\t\tplain: plainTextGrammar,\r\n\t\t\t\tplaintext: plainTextGrammar,\r\n\t\t\t\ttext: plainTextGrammar,\r\n\t\t\t\ttxt: plainTextGrammar,\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\r\n\t\t\t\t *\r\n\t\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\r\n\t\t\t\t * will be overwritten at its original position.\r\n\t\t\t\t *\r\n\t\t\t\t * ## Best practices\r\n\t\t\t\t *\r\n\t\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\r\n\t\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\r\n\t\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\r\n\t\t\t\t *\r\n\t\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\r\n\t\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\r\n\t\t\t\t *\r\n\t\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\r\n\t\t\t\t * @param {Grammar} redef The new tokens to append.\r\n\t\t\t\t * @returns {Grammar} The new language created.\r\n\t\t\t\t * @public\r\n\t\t\t\t * @example\r\n\t\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\r\n\t\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\r\n\t\t\t\t *     // at its original position\r\n\t\t\t\t *     'comment': { ... },\r\n\t\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\r\n\t\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\r\n\t\t\t\t * });\r\n\t\t\t\t */\r\n\t\t\t\textend: function (id, redef) {\r\n\t\t\t\t\tvar lang = _.util.clone(_.languages[id]);\r\n\r\n\t\t\t\t\tfor (var key in redef) {\r\n\t\t\t\t\t\tlang[key] = redef[key];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn lang;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\r\n\t\t\t\t *\r\n\t\t\t\t * ## Usage\r\n\t\t\t\t *\r\n\t\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\r\n\t\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\r\n\t\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\r\n\t\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\r\n\t\t\t\t * this:\r\n\t\t\t\t *\r\n\t\t\t\t * ```js\r\n\t\t\t\t * Prism.languages.markup.style = {\r\n\t\t\t\t *     // token\r\n\t\t\t\t * };\r\n\t\t\t\t * ```\r\n\t\t\t\t *\r\n\t\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\r\n\t\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\r\n\t\t\t\t *\r\n\t\t\t\t * ```js\r\n\t\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\r\n\t\t\t\t *     'style': {\r\n\t\t\t\t *         // token\r\n\t\t\t\t *     }\r\n\t\t\t\t * });\r\n\t\t\t\t * ```\r\n\t\t\t\t *\r\n\t\t\t\t * ## Special cases\r\n\t\t\t\t *\r\n\t\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\r\n\t\t\t\t * will be ignored.\r\n\t\t\t\t *\r\n\t\t\t\t * This behavior can be used to insert tokens after `before`:\r\n\t\t\t\t *\r\n\t\t\t\t * ```js\r\n\t\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\r\n\t\t\t\t *     'comment': Prism.languages.markup.comment,\r\n\t\t\t\t *     // tokens after 'comment'\r\n\t\t\t\t * });\r\n\t\t\t\t * ```\r\n\t\t\t\t *\r\n\t\t\t\t * ## Limitations\r\n\t\t\t\t *\r\n\t\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\r\n\t\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\r\n\t\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\r\n\t\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\r\n\t\t\t\t *\r\n\t\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\r\n\t\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\r\n\t\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\r\n\t\t\t\t *\r\n\t\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\r\n\t\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\r\n\t\t\t\t *\r\n\t\t\t\t * ```js\r\n\t\t\t\t * var oldMarkup = Prism.languages.markup;\r\n\t\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\r\n\t\t\t\t *\r\n\t\t\t\t * assert(oldMarkup !== Prism.languages.markup);\r\n\t\t\t\t * assert(newMarkup === Prism.languages.markup);\r\n\t\t\t\t * ```\r\n\t\t\t\t *\r\n\t\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\r\n\t\t\t\t * object to be modified.\r\n\t\t\t\t * @param {string} before The key to insert before.\r\n\t\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\r\n\t\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\r\n\t\t\t\t * object to be modified.\r\n\t\t\t\t *\r\n\t\t\t\t * Defaults to `Prism.languages`.\r\n\t\t\t\t * @returns {Grammar} The new grammar object.\r\n\t\t\t\t * @public\r\n\t\t\t\t */\r\n\t\t\t\tinsertBefore: function (inside, before, insert, root) {\r\n\t\t\t\t\troot = root || /** @type {any} */ (_.languages);\r\n\t\t\t\t\tvar grammar = root[inside];\r\n\t\t\t\t\t/** @type {Grammar} */\r\n\t\t\t\t\tvar ret = {};\r\n\r\n\t\t\t\t\tfor (var token in grammar) {\r\n\t\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\r\n\r\n\t\t\t\t\t\t\tif (token == before) {\r\n\t\t\t\t\t\t\t\tfor (var newToken in insert) {\r\n\t\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\r\n\t\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\r\n\t\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\r\n\t\t\t\t\t\t\t\tret[token] = grammar[token];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar old = root[inside];\r\n\t\t\t\t\troot[inside] = ret;\r\n\r\n\t\t\t\t\t// Update references in other language definitions\r\n\t\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\r\n\t\t\t\t\t\tif (value === old && key != inside) {\r\n\t\t\t\t\t\t\tthis[key] = ret;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\treturn ret;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Traverse a language definition with Depth First Search\r\n\t\t\t\tDFS: function DFS(o, callback, type, visited) {\r\n\t\t\t\t\tvisited = visited || {};\r\n\r\n\t\t\t\t\tvar objId = _.util.objId;\r\n\r\n\t\t\t\t\tfor (var i in o) {\r\n\t\t\t\t\t\tif (o.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\r\n\r\n\t\t\t\t\t\t\tvar property = o[i];\r\n\t\t\t\t\t\t\tvar propertyType = _.util.type(property);\r\n\r\n\t\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\r\n\t\t\t\t\t\t\t\tvisited[objId(property)] = true;\r\n\t\t\t\t\t\t\t\tDFS(property, callback, null, visited);\r\n\t\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\r\n\t\t\t\t\t\t\t\tvisited[objId(property)] = true;\r\n\t\t\t\t\t\t\t\tDFS(property, callback, i, visited);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tplugins: {},\r\n\r\n\t\t\t/**\r\n\t\t\t * This is the most high-level function in Prism’s API.\r\n\t\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\r\n\t\t\t * each one of them.\r\n\t\t\t *\r\n\t\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\r\n\t\t\t *\r\n\t\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\r\n\t\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\r\n\t\t\t * @memberof Prism\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\thighlightAll: function (async, callback) {\r\n\t\t\t\t_.highlightAllUnder(document, async, callback);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\r\n\t\t\t * {@link Prism.highlightElement} on each one of them.\r\n\t\t\t *\r\n\t\t\t * The following hooks will be run:\r\n\t\t\t * 1. `before-highlightall`\r\n\t\t\t * 2. `before-all-elements-highlight`\r\n\t\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\r\n\t\t\t *\r\n\t\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\r\n\t\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\r\n\t\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\r\n\t\t\t * @memberof Prism\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\thighlightAllUnder: function (container, async, callback) {\r\n\t\t\t\tvar env = {\r\n\t\t\t\t\tcallback: callback,\r\n\t\t\t\t\tcontainer: container,\r\n\t\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\r\n\t\t\t\t};\r\n\r\n\t\t\t\t_.hooks.run('before-highlightall', env);\r\n\r\n\t\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\r\n\r\n\t\t\t\t_.hooks.run('before-all-elements-highlight', env);\r\n\r\n\t\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\r\n\t\t\t\t\t_.highlightElement(element, async === true, env.callback);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Highlights the code inside a single element.\r\n\t\t\t *\r\n\t\t\t * The following hooks will be run:\r\n\t\t\t * 1. `before-sanity-check`\r\n\t\t\t * 2. `before-highlight`\r\n\t\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\r\n\t\t\t * 4. `before-insert`\r\n\t\t\t * 5. `after-highlight`\r\n\t\t\t * 6. `complete`\r\n\t\t\t *\r\n\t\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\r\n\t\t\t * the element's language.\r\n\t\t\t *\r\n\t\t\t * @param {Element} element The element containing the code.\r\n\t\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\r\n\t\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\r\n\t\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\r\n\t\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\r\n\t\t\t *\r\n\t\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\r\n\t\t\t * asynchronous highlighting to work. You can build your own bundle on the\r\n\t\t\t * [Download page](https://prismjs.com/download.html).\r\n\t\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\r\n\t\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\r\n\t\t\t * @memberof Prism\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\thighlightElement: function (element, async, callback) {\r\n\t\t\t\t// Find language\r\n\t\t\t\tvar language = _.util.getLanguage(element);\r\n\t\t\t\tvar grammar = _.languages[language];\r\n\r\n\t\t\t\t// Set language on the element, if not present\r\n\t\t\t\t_.util.setLanguage(element, language);\r\n\r\n\t\t\t\t// Set language on the parent, for styling\r\n\t\t\t\tvar parent = element.parentElement;\r\n\t\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\r\n\t\t\t\t\t_.util.setLanguage(parent, language);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar code = element.textContent;\r\n\r\n\t\t\t\tvar env = {\r\n\t\t\t\t\telement: element,\r\n\t\t\t\t\tlanguage: language,\r\n\t\t\t\t\tgrammar: grammar,\r\n\t\t\t\t\tcode: code\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction insertHighlightedCode(highlightedCode) {\r\n\t\t\t\t\tenv.highlightedCode = highlightedCode;\r\n\r\n\t\t\t\t\t_.hooks.run('before-insert', env);\r\n\r\n\t\t\t\t\tenv.element.innerHTML = env.highlightedCode;\r\n\r\n\t\t\t\t\t_.hooks.run('after-highlight', env);\r\n\t\t\t\t\t_.hooks.run('complete', env);\r\n\t\t\t\t\tcallback && callback.call(env.element);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_.hooks.run('before-sanity-check', env);\r\n\r\n\t\t\t\t// plugins may change/add the parent/element\r\n\t\t\t\tparent = env.element.parentElement;\r\n\t\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\r\n\t\t\t\t\tparent.setAttribute('tabindex', '0');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!env.code) {\r\n\t\t\t\t\t_.hooks.run('complete', env);\r\n\t\t\t\t\tcallback && callback.call(env.element);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_.hooks.run('before-highlight', env);\r\n\r\n\t\t\t\tif (!env.grammar) {\r\n\t\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (async && _self.Worker) {\r\n\t\t\t\t\tvar worker = new Worker(_.filename);\r\n\r\n\t\t\t\t\tworker.onmessage = function (evt) {\r\n\t\t\t\t\t\tinsertHighlightedCode(evt.data);\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tworker.postMessage(JSON.stringify({\r\n\t\t\t\t\t\tlanguage: env.language,\r\n\t\t\t\t\t\tcode: env.code,\r\n\t\t\t\t\t\timmediateClose: true\r\n\t\t\t\t\t}));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\r\n\t\t\t * and the language definitions to use, and returns a string with the HTML produced.\r\n\t\t\t *\r\n\t\t\t * The following hooks will be run:\r\n\t\t\t * 1. `before-tokenize`\r\n\t\t\t * 2. `after-tokenize`\r\n\t\t\t * 3. `wrap`: On each {@link Token}.\r\n\t\t\t *\r\n\t\t\t * @param {string} text A string with the code to be highlighted.\r\n\t\t\t * @param {Grammar} grammar An object containing the tokens to use.\r\n\t\t\t *\r\n\t\t\t * Usually a language definition like `Prism.languages.markup`.\r\n\t\t\t * @param {string} language The name of the language definition passed to `grammar`.\r\n\t\t\t * @returns {string} The highlighted HTML.\r\n\t\t\t * @memberof Prism\r\n\t\t\t * @public\r\n\t\t\t * @example\r\n\t\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\r\n\t\t\t */\r\n\t\t\thighlight: function (text, grammar, language) {\r\n\t\t\t\tvar env = {\r\n\t\t\t\t\tcode: text,\r\n\t\t\t\t\tgrammar: grammar,\r\n\t\t\t\t\tlanguage: language\r\n\t\t\t\t};\r\n\t\t\t\t_.hooks.run('before-tokenize', env);\r\n\t\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\r\n\t\t\t\t_.hooks.run('after-tokenize', env);\r\n\t\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\r\n\t\t\t * and the language definitions to use, and returns an array with the tokenized code.\r\n\t\t\t *\r\n\t\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\r\n\t\t\t *\r\n\t\t\t * This method could be useful in other contexts as well, as a very crude parser.\r\n\t\t\t *\r\n\t\t\t * @param {string} text A string with the code to be highlighted.\r\n\t\t\t * @param {Grammar} grammar An object containing the tokens to use.\r\n\t\t\t *\r\n\t\t\t * Usually a language definition like `Prism.languages.markup`.\r\n\t\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\r\n\t\t\t * @memberof Prism\r\n\t\t\t * @public\r\n\t\t\t * @example\r\n\t\t\t * let code = `var foo = 0;`;\r\n\t\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\r\n\t\t\t * tokens.forEach(token => {\r\n\t\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\r\n\t\t\t *         console.log(`Found numeric literal: ${token.content}`);\r\n\t\t\t *     }\r\n\t\t\t * });\r\n\t\t\t */\r\n\t\t\ttokenize: function (text, grammar) {\r\n\t\t\t\tvar rest = grammar.rest;\r\n\t\t\t\tif (rest) {\r\n\t\t\t\t\tfor (var token in rest) {\r\n\t\t\t\t\t\tgrammar[token] = rest[token];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdelete grammar.rest;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar tokenList = new LinkedList();\r\n\t\t\t\taddAfter(tokenList, tokenList.head, text);\r\n\r\n\t\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\r\n\r\n\t\t\t\treturn toArray(tokenList);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * @namespace\r\n\t\t\t * @memberof Prism\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\thooks: {\r\n\t\t\t\tall: {},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Adds the given callback to the list of callbacks for the given hook.\r\n\t\t\t\t *\r\n\t\t\t\t * The callback will be invoked when the hook it is registered for is run.\r\n\t\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\r\n\t\t\t\t *\r\n\t\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\r\n\t\t\t\t *\r\n\t\t\t\t * @param {string} name The name of the hook.\r\n\t\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\r\n\t\t\t\t * @public\r\n\t\t\t\t */\r\n\t\t\t\tadd: function (name, callback) {\r\n\t\t\t\t\tvar hooks = _.hooks.all;\r\n\r\n\t\t\t\t\thooks[name] = hooks[name] || [];\r\n\r\n\t\t\t\t\thooks[name].push(callback);\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\r\n\t\t\t\t *\r\n\t\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\r\n\t\t\t\t *\r\n\t\t\t\t * @param {string} name The name of the hook.\r\n\t\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\r\n\t\t\t\t * @public\r\n\t\t\t\t */\r\n\t\t\t\trun: function (name, env) {\r\n\t\t\t\t\tvar callbacks = _.hooks.all[name];\r\n\r\n\t\t\t\t\tif (!callbacks || !callbacks.length) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\r\n\t\t\t\t\t\tcallback(env);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tToken: Token\r\n\t\t};\r\n\t\t_self.Prism = _;\r\n\r\n\r\n\t\t// Typescript note:\r\n\t\t// The following can be used to import the Token type in JSDoc:\r\n\t\t//\r\n\t\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\r\n\r\n\t\t/**\r\n\t\t * Creates a new token.\r\n\t\t *\r\n\t\t * @param {string} type See {@link Token#type type}\r\n\t\t * @param {string | TokenStream} content See {@link Token#content content}\r\n\t\t * @param {string|string[]} [alias] The alias(es) of the token.\r\n\t\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\r\n\t\t * @class\r\n\t\t * @global\r\n\t\t * @public\r\n\t\t */\r\n\t\tfunction Token(type, content, alias, matchedStr) {\r\n\t\t\t/**\r\n\t\t\t * The type of the token.\r\n\t\t\t *\r\n\t\t\t * This is usually the key of a pattern in a {@link Grammar}.\r\n\t\t\t *\r\n\t\t\t * @type {string}\r\n\t\t\t * @see GrammarToken\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tthis.type = type;\r\n\t\t\t/**\r\n\t\t\t * The strings or tokens contained by this token.\r\n\t\t\t *\r\n\t\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\r\n\t\t\t *\r\n\t\t\t * @type {string | TokenStream}\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tthis.content = content;\r\n\t\t\t/**\r\n\t\t\t * The alias(es) of the token.\r\n\t\t\t *\r\n\t\t\t * @type {string|string[]}\r\n\t\t\t * @see GrammarToken\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tthis.alias = alias;\r\n\t\t\t// Copy of the full string this token was created from\r\n\t\t\tthis.length = (matchedStr || '').length | 0;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * A token stream is an array of strings and {@link Token Token} objects.\r\n\t\t *\r\n\t\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\r\n\t\t * them.\r\n\t\t *\r\n\t\t * 1. No adjacent strings.\r\n\t\t * 2. No empty strings.\r\n\t\t *\r\n\t\t *    The only exception here is the token stream that only contains the empty string and nothing else.\r\n\t\t *\r\n\t\t * @typedef {Array<string | Token>} TokenStream\r\n\t\t * @global\r\n\t\t * @public\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Converts the given token or token stream to an HTML representation.\r\n\t\t *\r\n\t\t * The following hooks will be run:\r\n\t\t * 1. `wrap`: On each {@link Token}.\r\n\t\t *\r\n\t\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\r\n\t\t * @param {string} language The name of current language.\r\n\t\t * @returns {string} The HTML representation of the token or token stream.\r\n\t\t * @memberof Token\r\n\t\t * @static\r\n\t\t */\r\n\t\tToken.stringify = function stringify(o, language) {\r\n\t\t\tif (typeof o == 'string') {\r\n\t\t\t\treturn o;\r\n\t\t\t}\r\n\t\t\tif (Array.isArray(o)) {\r\n\t\t\t\tvar s = '';\r\n\t\t\t\to.forEach(function (e) {\r\n\t\t\t\t\ts += stringify(e, language);\r\n\t\t\t\t});\r\n\t\t\t\treturn s;\r\n\t\t\t}\r\n\r\n\t\t\tvar env = {\r\n\t\t\t\ttype: o.type,\r\n\t\t\t\tcontent: stringify(o.content, language),\r\n\t\t\t\ttag: 'span',\r\n\t\t\t\tclasses: ['token', o.type],\r\n\t\t\t\tattributes: {},\r\n\t\t\t\tlanguage: language\r\n\t\t\t};\r\n\r\n\t\t\tvar aliases = o.alias;\r\n\t\t\tif (aliases) {\r\n\t\t\t\tif (Array.isArray(aliases)) {\r\n\t\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tenv.classes.push(aliases);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t_.hooks.run('wrap', env);\r\n\r\n\t\t\tvar attributes = '';\r\n\t\t\tfor (var name in env.attributes) {\r\n\t\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\r\n\t\t\t}\r\n\r\n\t\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {RegExp} pattern\r\n\t\t * @param {number} pos\r\n\t\t * @param {string} text\r\n\t\t * @param {boolean} lookbehind\r\n\t\t * @returns {RegExpExecArray | null}\r\n\t\t */\r\n\t\tfunction matchPattern(pattern, pos, text, lookbehind) {\r\n\t\t\tpattern.lastIndex = pos;\r\n\t\t\tvar match = pattern.exec(text);\r\n\t\t\tif (match && lookbehind && match[1]) {\r\n\t\t\t\t// change the match to remove the text matched by the Prism lookbehind group\r\n\t\t\t\tvar lookbehindLength = match[1].length;\r\n\t\t\t\tmatch.index += lookbehindLength;\r\n\t\t\t\tmatch[0] = match[0].slice(lookbehindLength);\r\n\t\t\t}\r\n\t\t\treturn match;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {string} text\r\n\t\t * @param {LinkedList<string | Token>} tokenList\r\n\t\t * @param {any} grammar\r\n\t\t * @param {LinkedListNode<string | Token>} startNode\r\n\t\t * @param {number} startPos\r\n\t\t * @param {RematchOptions} [rematch]\r\n\t\t * @returns {void}\r\n\t\t * @private\r\n\t\t *\r\n\t\t * @typedef RematchOptions\r\n\t\t * @property {string} cause\r\n\t\t * @property {number} reach\r\n\t\t */\r\n\t\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\r\n\t\t\tfor (var token in grammar) {\r\n\t\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar patterns = grammar[token];\r\n\t\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\r\n\r\n\t\t\t\tfor (var j = 0; j < patterns.length; ++j) {\r\n\t\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar patternObj = patterns[j];\r\n\t\t\t\t\tvar inside = patternObj.inside;\r\n\t\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\r\n\t\t\t\t\tvar greedy = !!patternObj.greedy;\r\n\t\t\t\t\tvar alias = patternObj.alias;\r\n\r\n\t\t\t\t\tif (greedy && !patternObj.pattern.global) {\r\n\t\t\t\t\t\t// Without the global flag, lastIndex won't work\r\n\t\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\r\n\t\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t/** @type {RegExp} */\r\n\t\t\t\t\tvar pattern = patternObj.pattern || patternObj;\r\n\r\n\t\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\r\n\t\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\r\n\t\t\t\t\t\tcurrentNode !== tokenList.tail;\r\n\t\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\r\n\t\t\t\t\t) {\r\n\r\n\t\t\t\t\t\tif (rematch && pos >= rematch.reach) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar str = currentNode.value;\r\n\r\n\t\t\t\t\t\tif (tokenList.length > text.length) {\r\n\t\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (str instanceof Token) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\r\n\t\t\t\t\t\tvar match;\r\n\r\n\t\t\t\t\t\tif (greedy) {\r\n\t\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\r\n\t\t\t\t\t\t\tif (!match || match.index >= text.length) {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar from = match.index;\r\n\t\t\t\t\t\t\tvar to = match.index + match[0].length;\r\n\t\t\t\t\t\t\tvar p = pos;\r\n\r\n\t\t\t\t\t\t\t// find the node that contains the match\r\n\t\t\t\t\t\t\tp += currentNode.value.length;\r\n\t\t\t\t\t\t\twhile (from >= p) {\r\n\t\t\t\t\t\t\t\tcurrentNode = currentNode.next;\r\n\t\t\t\t\t\t\t\tp += currentNode.value.length;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// adjust pos (and p)\r\n\t\t\t\t\t\t\tp -= currentNode.value.length;\r\n\t\t\t\t\t\t\tpos = p;\r\n\r\n\t\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\r\n\t\t\t\t\t\t\tif (currentNode.value instanceof Token) {\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// find the last node which is affected by this match\r\n\t\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\t\tvar k = currentNode;\r\n\t\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\r\n\t\t\t\t\t\t\t\tk = k.next\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tremoveCount++;\r\n\t\t\t\t\t\t\t\tp += k.value.length;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tremoveCount--;\r\n\r\n\t\t\t\t\t\t\t// replace with the new match\r\n\t\t\t\t\t\t\tstr = text.slice(pos, p);\r\n\t\t\t\t\t\t\tmatch.index -= pos;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\r\n\t\t\t\t\t\t\tif (!match) {\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// eslint-disable-next-line no-redeclare\r\n\t\t\t\t\t\tvar from = match.index;\r\n\t\t\t\t\t\tvar matchStr = match[0];\r\n\t\t\t\t\t\tvar before = str.slice(0, from);\r\n\t\t\t\t\t\tvar after = str.slice(from + matchStr.length);\r\n\r\n\t\t\t\t\t\tvar reach = pos + str.length;\r\n\t\t\t\t\t\tif (rematch && reach > rematch.reach) {\r\n\t\t\t\t\t\t\trematch.reach = reach;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar removeFrom = currentNode.prev;\r\n\r\n\t\t\t\t\t\tif (before) {\r\n\t\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\r\n\t\t\t\t\t\t\tpos += before.length;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\r\n\r\n\t\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\r\n\t\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\r\n\r\n\t\t\t\t\t\tif (after) {\r\n\t\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (removeCount > 1) {\r\n\t\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\r\n\t\t\t\t\t\t\t// this can only happen if the current pattern is greedy\r\n\r\n\t\t\t\t\t\t\t/** @type {RematchOptions} */\r\n\t\t\t\t\t\t\tvar nestedRematch = {\r\n\t\t\t\t\t\t\t\tcause: token + ',' + j,\r\n\t\t\t\t\t\t\t\treach: reach\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\r\n\r\n\t\t\t\t\t\t\t// the reach might have been extended because of the rematching\r\n\t\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\r\n\t\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @typedef LinkedListNode\r\n\t\t * @property {T} value\r\n\t\t * @property {LinkedListNode<T> | null} prev The previous node.\r\n\t\t * @property {LinkedListNode<T> | null} next The next node.\r\n\t\t * @template T\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * @template T\r\n\t\t * @private\r\n\t\t */\r\n\t\tfunction LinkedList() {\r\n\t\t\t/** @type {LinkedListNode<T>} */\r\n\t\t\tvar head = { value: null, prev: null, next: null };\r\n\t\t\t/** @type {LinkedListNode<T>} */\r\n\t\t\tvar tail = { value: null, prev: head, next: null };\r\n\t\t\thead.next = tail;\r\n\r\n\t\t\t/** @type {LinkedListNode<T>} */\r\n\t\t\tthis.head = head;\r\n\t\t\t/** @type {LinkedListNode<T>} */\r\n\t\t\tthis.tail = tail;\r\n\t\t\tthis.length = 0;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Adds a new node with the given value to the list.\r\n\t\t *\r\n\t\t * @param {LinkedList<T>} list\r\n\t\t * @param {LinkedListNode<T>} node\r\n\t\t * @param {T} value\r\n\t\t * @returns {LinkedListNode<T>} The added node.\r\n\t\t * @template T\r\n\t\t */\r\n\t\tfunction addAfter(list, node, value) {\r\n\t\t\t// assumes that node != list.tail && values.length >= 0\r\n\t\t\tvar next = node.next;\r\n\r\n\t\t\tvar newNode = { value: value, prev: node, next: next };\r\n\t\t\tnode.next = newNode;\r\n\t\t\tnext.prev = newNode;\r\n\t\t\tlist.length++;\r\n\r\n\t\t\treturn newNode;\r\n\t\t}\r\n\t\t/**\r\n\t\t * Removes `count` nodes after the given node. The given node will not be removed.\r\n\t\t *\r\n\t\t * @param {LinkedList<T>} list\r\n\t\t * @param {LinkedListNode<T>} node\r\n\t\t * @param {number} count\r\n\t\t * @template T\r\n\t\t */\r\n\t\tfunction removeRange(list, node, count) {\r\n\t\t\tvar next = node.next;\r\n\t\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\r\n\t\t\t\tnext = next.next;\r\n\t\t\t}\r\n\t\t\tnode.next = next;\r\n\t\t\tnext.prev = node;\r\n\t\t\tlist.length -= i;\r\n\t\t}\r\n\t\t/**\r\n\t\t * @param {LinkedList<T>} list\r\n\t\t * @returns {T[]}\r\n\t\t * @template T\r\n\t\t */\r\n\t\tfunction toArray(list) {\r\n\t\t\tvar array = [];\r\n\t\t\tvar node = list.head.next;\r\n\t\t\twhile (node !== list.tail) {\r\n\t\t\t\tarray.push(node.value);\r\n\t\t\t\tnode = node.next;\r\n\t\t\t}\r\n\t\t\treturn array;\r\n\t\t}\r\n\r\n\r\n\t\tif (!_self.document) {\r\n\t\t\tif (!_self.addEventListener) {\r\n\t\t\t\t// in Node.js\r\n\t\t\t\treturn _;\r\n\t\t\t}\r\n\r\n\t\t\tif (!_.disableWorkerMessageHandler) {\r\n\t\t\t\t// In worker\r\n\t\t\t\t_self.addEventListener('message', function (evt) {\r\n\t\t\t\t\tvar message = JSON.parse(evt.data);\r\n\t\t\t\t\tvar lang = message.language;\r\n\t\t\t\t\tvar code = message.code;\r\n\t\t\t\t\tvar immediateClose = message.immediateClose;\r\n\r\n\t\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\r\n\t\t\t\t\tif (immediateClose) {\r\n\t\t\t\t\t\t_self.close();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, false);\r\n\t\t\t}\r\n\r\n\t\t\treturn _;\r\n\t\t}\r\n\r\n\t\t// Get current script and highlight\r\n\t\tvar script = _.util.currentScript();\r\n\r\n\t\tif (script) {\r\n\t\t\t_.filename = script.src;\r\n\r\n\t\t\tif (script.hasAttribute('data-manual')) {\r\n\t\t\t\t_.manual = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction highlightAutomaticallyCallback() {\r\n\t\t\tif (!_.manual) {\r\n\t\t\t\t_.highlightAll();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!_.manual) {\r\n\t\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\r\n\t\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\r\n\t\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\r\n\t\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\r\n\t\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\r\n\t\t\t// See https://github.com/PrismJS/prism/issues/2102\r\n\t\t\tvar readyState = document.readyState;\r\n\t\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\r\n\t\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\r\n\t\t\t} else {\r\n\t\t\t\tif (window.requestAnimationFrame) {\r\n\t\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\r\n\t\t\t\t} else {\r\n\t\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn _;\r\n\r\n\t}(_self));\r\n\r\n\r\n\t// some additional documentation/types\r\n\r\n\t/**\r\n\t * The expansion of a simple `RegExp` literal to support additional properties.\r\n\t *\r\n\t * @typedef GrammarToken\r\n\t * @property {RegExp} pattern The regular expression of the token.\r\n\t * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\r\n\t * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\r\n\t * @property {boolean} [greedy=false] Whether the token is greedy.\r\n\t * @property {string|string[]} [alias] An optional alias or list of aliases.\r\n\t * @property {Grammar} [inside] The nested grammar of this token.\r\n\t *\r\n\t * The `inside` grammar will be used to tokenize the text value of each token of this kind.\r\n\t *\r\n\t * This can be used to make nested and even recursive language definitions.\r\n\t *\r\n\t * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\r\n\t * each another.\r\n\t * @global\r\n\t * @public\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef Grammar\r\n\t * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\r\n\t * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\r\n\t * @global\r\n\t * @public\r\n\t */\r\n\r\n\t/**\r\n\t * A function which will invoked after an element was successfully highlighted.\r\n\t *\r\n\t * @callback HighlightCallback\r\n\t * @param {Element} element The element successfully highlighted.\r\n\t * @returns {void}\r\n\t * @global\r\n\t * @public\r\n\t */\r\n\r\n\t/**\r\n\t * @callback HookCallback\r\n\t * @param {Object<string, any>} env The environment variables of the hook.\r\n\t * @returns {void}\r\n\t * @global\r\n\t * @public\r\n\t */\r\n\r\n\r\n\t/* **********************************************\r\n\t     Begin prism-markup.js\r\n\t********************************************** */\r\n\r\n\tPrism.languages.markup = {\r\n\t\t'comment': {\r\n\t\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'prolog': {\r\n\t\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'doctype': {\r\n\t\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\r\n\t\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'internal-subset': {\r\n\t\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\tgreedy: true,\r\n\t\t\t\t\tinside: null // see below\r\n\t\t\t\t},\r\n\t\t\t\t'string': {\r\n\t\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\r\n\t\t\t\t\tgreedy: true\r\n\t\t\t\t},\r\n\t\t\t\t'punctuation': /^<!|>$|[[\\]]/,\r\n\t\t\t\t'doctype-tag': /^DOCTYPE/i,\r\n\t\t\t\t'name': /[^\\s<>'\"]+/\r\n\t\t\t}\r\n\t\t},\r\n\t\t'cdata': {\r\n\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'tag': {\r\n\t\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'tag': {\r\n\t\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'punctuation': /^<\\/?/,\r\n\t\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'special-attr': [],\r\n\t\t\t\t'attr-value': {\r\n\t\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'punctuation': [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpattern: /^=/,\r\n\t\t\t\t\t\t\t\talias: 'attr-equals'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t/\"|'/\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'punctuation': /\\/?>/,\r\n\t\t\t\t'attr-name': {\r\n\t\t\t\t\tpattern: /[^\\s>\\/]+/,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\t'entity': [\r\n\t\t\t{\r\n\t\t\t\tpattern: /&[\\da-z]{1,8};/i,\r\n\t\t\t\talias: 'named-entity'\r\n\t\t\t},\r\n\t\t\t/&#x?[\\da-f]{1,8};/i\r\n\t\t]\r\n\t};\r\n\r\n\tPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\r\n\t\tPrism.languages.markup['entity'];\r\n\tPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\r\n\r\n\t// Plugin to make entity title show the real entity, idea by Roman Komarov\r\n\tPrism.hooks.add('wrap', function (env) {\r\n\r\n\t\tif (env.type === 'entity') {\r\n\t\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\r\n\t\t}\r\n\t});\r\n\r\n\tObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\r\n\t\t/**\r\n\t\t * Adds an inlined language to markup.\r\n\t\t *\r\n\t\t * An example of an inlined language is CSS with `<style>` tags.\r\n\t\t *\r\n\t\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\r\n\t\t * case insensitive.\r\n\t\t * @param {string} lang The language key.\r\n\t\t * @example\r\n\t\t * addInlined('style', 'css');\r\n\t\t */\r\n\t\tvalue: function addInlined(tagName, lang) {\r\n\t\t\tvar includedCdataInside = {};\r\n\t\t\tincludedCdataInside['language-' + lang] = {\r\n\t\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: Prism.languages[lang]\r\n\t\t\t};\r\n\t\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\r\n\r\n\t\t\tvar inside = {\r\n\t\t\t\t'included-cdata': {\r\n\t\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\r\n\t\t\t\t\tinside: includedCdataInside\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tinside['language-' + lang] = {\r\n\t\t\t\tpattern: /[\\s\\S]+/,\r\n\t\t\t\tinside: Prism.languages[lang]\r\n\t\t\t};\r\n\r\n\t\t\tvar def = {};\r\n\t\t\tdef[tagName] = {\r\n\t\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true,\r\n\t\t\t\tinside: inside\r\n\t\t\t};\r\n\r\n\t\t\tPrism.languages.insertBefore('markup', 'cdata', def);\r\n\t\t}\r\n\t});\r\n\tObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\r\n\t\t/**\r\n\t\t * Adds an pattern to highlight languages embedded in HTML attributes.\r\n\t\t *\r\n\t\t * An example of an inlined language is CSS with `style` attributes.\r\n\t\t *\r\n\t\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\r\n\t\t * case insensitive.\r\n\t\t * @param {string} lang The language key.\r\n\t\t * @example\r\n\t\t * addAttribute('style', 'css');\r\n\t\t */\r\n\t\tvalue: function (attrName, lang) {\r\n\t\t\tPrism.languages.markup.tag.inside['special-attr'].push({\r\n\t\t\t\tpattern: RegExp(\r\n\t\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\r\n\t\t\t\t\t'i'\r\n\t\t\t\t),\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'attr-name': /^[^\\s=]+/,\r\n\t\t\t\t\t'attr-value': {\r\n\t\t\t\t\t\tpattern: /=[\\s\\S]+/,\r\n\t\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t\t'value': {\r\n\t\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\r\n\t\t\t\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\r\n\t\t\t\t\t\t\t\tinside: Prism.languages[lang]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t'punctuation': [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tpattern: /^=/,\r\n\t\t\t\t\t\t\t\t\talias: 'attr-equals'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t/\"|'/\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n\tPrism.languages.html = Prism.languages.markup;\r\n\tPrism.languages.mathml = Prism.languages.markup;\r\n\tPrism.languages.svg = Prism.languages.markup;\r\n\r\n\tPrism.languages.xml = Prism.languages.extend('markup', {});\r\n\tPrism.languages.ssml = Prism.languages.xml;\r\n\tPrism.languages.atom = Prism.languages.xml;\r\n\tPrism.languages.rss = Prism.languages.xml;\r\n\r\n\r\n\t/* **********************************************\r\n\t     Begin prism-css.js\r\n\t********************************************** */\r\n\r\n\t(function (Prism) {\r\n\r\n\t\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\r\n\r\n\t\tPrism.languages.css = {\r\n\t\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\r\n\t\t\t'atrule': {\r\n\t\t\t\tpattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'rule': /^@[\\w-]+/,\r\n\t\t\t\t\t'selector-function-argument': {\r\n\t\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\r\n\t\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\t\talias: 'selector'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'keyword': {\r\n\t\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\r\n\t\t\t\t\t\tlookbehind: true\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// See rest below\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'url': {\r\n\t\t\t\t// https://drafts.csswg.org/css-values-3/#urls\r\n\t\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\r\n\t\t\t\tgreedy: true,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'function': /^url/i,\r\n\t\t\t\t\t'punctuation': /^\\(|\\)$/,\r\n\t\t\t\t\t'string': {\r\n\t\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\r\n\t\t\t\t\t\talias: 'url'\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'selector': {\r\n\t\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t'string': {\r\n\t\t\t\tpattern: string,\r\n\t\t\t\tgreedy: true\r\n\t\t\t},\r\n\t\t\t'property': {\r\n\t\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t'important': /!important\\b/i,\r\n\t\t\t'function': {\r\n\t\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t'punctuation': /[(){};:,]/\r\n\t\t};\r\n\r\n\t\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\r\n\r\n\t\tvar markup = Prism.languages.markup;\r\n\t\tif (markup) {\r\n\t\t\tmarkup.tag.addInlined('style', 'css');\r\n\t\t\tmarkup.tag.addAttribute('style', 'css');\r\n\t\t}\r\n\r\n\t}(Prism));\r\n\r\n\r\n\t/* **********************************************\r\n\t     Begin prism-clike.js\r\n\t********************************************** */\r\n\r\n\tPrism.languages.clike = {\r\n\t\t'comment': [\r\n\t\t\t{\r\n\t\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true\r\n\t\t\t}\r\n\t\t],\r\n\t\t'string': {\r\n\t\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'class-name': {\r\n\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'punctuation': /[.\\\\]/\r\n\t\t\t}\r\n\t\t},\r\n\t\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\r\n\t\t'boolean': /\\b(?:false|true)\\b/,\r\n\t\t'function': /\\b\\w+(?=\\()/,\r\n\t\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\r\n\t\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\r\n\t\t'punctuation': /[{}[\\];(),.:]/\r\n\t};\r\n\r\n\r\n\t/* **********************************************\r\n\t     Begin prism-javascript.js\r\n\t********************************************** */\r\n\r\n\tPrism.languages.javascript = Prism.languages.extend('clike', {\r\n\t\t'class-name': [\r\n\t\t\tPrism.languages.clike['class-name'],\r\n\t\t\t{\r\n\t\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t}\r\n\t\t],\r\n\t\t'keyword': [\r\n\t\t\t{\r\n\t\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t],\r\n\t\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\r\n\t\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\r\n\t\t'number': {\r\n\t\t\tpattern: RegExp(\r\n\t\t\t\t/(^|[^\\w$])/.source +\r\n\t\t\t\t'(?:' +\r\n\t\t\t\t(\r\n\t\t\t\t\t// constant\r\n\t\t\t\t\t/NaN|Infinity/.source +\r\n\t\t\t\t\t'|' +\r\n\t\t\t\t\t// binary integer\r\n\t\t\t\t\t/0[bB][01]+(?:_[01]+)*n?/.source +\r\n\t\t\t\t\t'|' +\r\n\t\t\t\t\t// octal integer\r\n\t\t\t\t\t/0[oO][0-7]+(?:_[0-7]+)*n?/.source +\r\n\t\t\t\t\t'|' +\r\n\t\t\t\t\t// hexadecimal integer\r\n\t\t\t\t\t/0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\r\n\t\t\t\t\t'|' +\r\n\t\t\t\t\t// decimal bigint\r\n\t\t\t\t\t/\\d+(?:_\\d+)*n/.source +\r\n\t\t\t\t\t'|' +\r\n\t\t\t\t\t// decimal number (integer or float) but no bigint\r\n\t\t\t\t\t/(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source\r\n\t\t\t\t) +\r\n\t\t\t\t')' +\r\n\t\t\t\t/(?![\\w$])/.source\r\n\t\t\t),\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\r\n\t});\r\n\r\n\tPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\r\n\r\n\tPrism.languages.insertBefore('javascript', 'keyword', {\r\n\t\t'regex': {\r\n\t\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\r\n\t\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'regex-source': {\r\n\t\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\talias: 'language-regex',\r\n\t\t\t\t\tinside: Prism.languages.regex\r\n\t\t\t\t},\r\n\t\t\t\t'regex-delimiter': /^\\/|\\/$/,\r\n\t\t\t\t'regex-flags': /^[a-z]+$/,\r\n\t\t\t}\r\n\t\t},\r\n\t\t// This must be declared before keyword because we use \"function\" inside the look-forward\r\n\t\t'function-variable': {\r\n\t\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\r\n\t\t\talias: 'function'\r\n\t\t},\r\n\t\t'parameter': [\r\n\t\t\t{\r\n\t\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: Prism.languages.javascript\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: Prism.languages.javascript\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: Prism.languages.javascript\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: Prism.languages.javascript\r\n\t\t\t}\r\n\t\t],\r\n\t\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\r\n\t});\r\n\r\n\tPrism.languages.insertBefore('javascript', 'string', {\r\n\t\t'hashbang': {\r\n\t\t\tpattern: /^#!.*/,\r\n\t\t\tgreedy: true,\r\n\t\t\talias: 'comment'\r\n\t\t},\r\n\t\t'template-string': {\r\n\t\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'template-punctuation': {\r\n\t\t\t\t\tpattern: /^`|`$/,\r\n\t\t\t\t\talias: 'string'\r\n\t\t\t\t},\r\n\t\t\t\t'interpolation': {\r\n\t\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'interpolation-punctuation': {\r\n\t\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\r\n\t\t\t\t\t\t\talias: 'punctuation'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\trest: Prism.languages.javascript\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'string': /[\\s\\S]+/\r\n\t\t\t}\r\n\t\t},\r\n\t\t'string-property': {\r\n\t\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\talias: 'property'\r\n\t\t}\r\n\t});\r\n\r\n\tPrism.languages.insertBefore('javascript', 'operator', {\r\n\t\t'literal-property': {\r\n\t\t\tpattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'property'\r\n\t\t},\r\n\t});\r\n\r\n\tif (Prism.languages.markup) {\r\n\t\tPrism.languages.markup.tag.addInlined('script', 'javascript');\r\n\r\n\t\t// add attribute support for all DOM events.\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\r\n\t\tPrism.languages.markup.tag.addAttribute(\r\n\t\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\r\n\t\t\t'javascript'\r\n\t\t);\r\n\t}\r\n\r\n\tPrism.languages.js = Prism.languages.javascript;\r\n\r\n\r\n\t/* **********************************************\r\n\t     Begin prism-file-highlight.js\r\n\t********************************************** */\r\n\r\n\t(function () {\r\n\r\n\t\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\r\n\t\tif (!Element.prototype.matches) {\r\n\t\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\r\n\t\t}\r\n\r\n\t\tvar LOADING_MESSAGE = 'Loading…';\r\n\t\tvar FAILURE_MESSAGE = function (status, message) {\r\n\t\t\treturn '✖ Error ' + status + ' while fetching file: ' + message;\r\n\t\t};\r\n\t\tvar FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';\r\n\r\n\t\tvar EXTENSIONS = {\r\n\t\t\t'js': 'javascript',\r\n\t\t\t'py': 'python',\r\n\t\t\t'rb': 'ruby',\r\n\t\t\t'ps1': 'powershell',\r\n\t\t\t'psm1': 'powershell',\r\n\t\t\t'sh': 'bash',\r\n\t\t\t'bat': 'batch',\r\n\t\t\t'h': 'c',\r\n\t\t\t'tex': 'latex'\r\n\t\t};\r\n\r\n\t\tvar STATUS_ATTR = 'data-src-status';\r\n\t\tvar STATUS_LOADING = 'loading';\r\n\t\tvar STATUS_LOADED = 'loaded';\r\n\t\tvar STATUS_FAILED = 'failed';\r\n\r\n\t\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'\r\n\t\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\r\n\r\n\t\t/**\r\n\t\t * Loads the given file.\r\n\t\t *\r\n\t\t * @param {string} src The URL or path of the source file to load.\r\n\t\t * @param {(result: string) => void} success\r\n\t\t * @param {(reason: string) => void} error\r\n\t\t */\r\n\t\tfunction loadFile(src, success, error) {\r\n\t\t\tvar xhr = new XMLHttpRequest();\r\n\t\t\txhr.open('GET', src, true);\r\n\t\t\txhr.onreadystatechange = function () {\r\n\t\t\t\tif (xhr.readyState == 4) {\r\n\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\r\n\t\t\t\t\t\tsuccess(xhr.responseText);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (xhr.status >= 400) {\r\n\t\t\t\t\t\t\terror(FAILURE_MESSAGE(xhr.status, xhr.statusText));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\terror(FAILURE_EMPTY_MESSAGE);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\txhr.send(null);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Parses the given range.\r\n\t\t *\r\n\t\t * This returns a range with inclusive ends.\r\n\t\t *\r\n\t\t * @param {string | null | undefined} range\r\n\t\t * @returns {[number, number | undefined] | undefined}\r\n\t\t */\r\n\t\tfunction parseRange(range) {\r\n\t\t\tvar m = /^\\s*(\\d+)\\s*(?:(,)\\s*(?:(\\d+)\\s*)?)?$/.exec(range || '');\r\n\t\t\tif (m) {\r\n\t\t\t\tvar start = Number(m[1]);\r\n\t\t\t\tvar comma = m[2];\r\n\t\t\t\tvar end = m[3];\r\n\r\n\t\t\t\tif (!comma) {\r\n\t\t\t\t\treturn [start, start];\r\n\t\t\t\t}\r\n\t\t\t\tif (!end) {\r\n\t\t\t\t\treturn [start, undefined];\r\n\t\t\t\t}\r\n\t\t\t\treturn [start, Number(end)];\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tPrism.hooks.add('before-highlightall', function (env) {\r\n\t\t\tenv.selector += ', ' + SELECTOR;\r\n\t\t});\r\n\r\n\t\tPrism.hooks.add('before-sanity-check', function (env) {\r\n\t\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);\r\n\t\t\tif (pre.matches(SELECTOR)) {\r\n\t\t\t\tenv.code = ''; // fast-path the whole thing and go to complete\r\n\r\n\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\r\n\r\n\t\t\t\t// add code element with loading message\r\n\t\t\t\tvar code = pre.appendChild(document.createElement('CODE'));\r\n\t\t\t\tcode.textContent = LOADING_MESSAGE;\r\n\r\n\t\t\t\tvar src = pre.getAttribute('data-src');\r\n\r\n\t\t\t\tvar language = env.language;\r\n\t\t\t\tif (language === 'none') {\r\n\t\t\t\t\t// the language might be 'none' because there is no language set;\r\n\t\t\t\t\t// in this case, we want to use the extension as the language\r\n\t\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\r\n\t\t\t\t\tlanguage = EXTENSIONS[extension] || extension;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// set language classes\r\n\t\t\t\tPrism.util.setLanguage(code, language);\r\n\t\t\t\tPrism.util.setLanguage(pre, language);\r\n\r\n\t\t\t\t// preload the language\r\n\t\t\t\tvar autoloader = Prism.plugins.autoloader;\r\n\t\t\t\tif (autoloader) {\r\n\t\t\t\t\tautoloader.loadLanguages(language);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// load file\r\n\t\t\t\tloadFile(\r\n\t\t\t\t\tsrc,\r\n\t\t\t\t\tfunction (text) {\r\n\t\t\t\t\t\t// mark as loaded\r\n\t\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);\r\n\r\n\t\t\t\t\t\t// handle data-range\r\n\t\t\t\t\t\tvar range = parseRange(pre.getAttribute('data-range'));\r\n\t\t\t\t\t\tif (range) {\r\n\t\t\t\t\t\t\tvar lines = text.split(/\\r\\n?|\\n/g);\r\n\r\n\t\t\t\t\t\t\t// the range is one-based and inclusive on both ends\r\n\t\t\t\t\t\t\tvar start = range[0];\r\n\t\t\t\t\t\t\tvar end = range[1] == null ? lines.length : range[1];\r\n\r\n\t\t\t\t\t\t\tif (start < 0) { start += lines.length; }\r\n\t\t\t\t\t\t\tstart = Math.max(0, Math.min(start - 1, lines.length));\r\n\t\t\t\t\t\t\tif (end < 0) { end += lines.length; }\r\n\t\t\t\t\t\t\tend = Math.max(0, Math.min(end, lines.length));\r\n\r\n\t\t\t\t\t\t\ttext = lines.slice(start, end).join('\\n');\r\n\r\n\t\t\t\t\t\t\t// add data-start for line numbers\r\n\t\t\t\t\t\t\tif (!pre.hasAttribute('data-start')) {\r\n\t\t\t\t\t\t\t\tpre.setAttribute('data-start', String(start + 1));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// highlight code\r\n\t\t\t\t\t\tcode.textContent = text;\r\n\t\t\t\t\t\tPrism.highlightElement(code);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfunction (error) {\r\n\t\t\t\t\t\t// mark as failed\r\n\t\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);\r\n\r\n\t\t\t\t\t\tcode.textContent = error;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tPrism.plugins.fileHighlight = {\r\n\t\t\t/**\r\n\t\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.\r\n\t\t\t *\r\n\t\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.\r\n\t\t\t *\r\n\t\t\t * @param {ParentNode} [container=document]\r\n\t\t\t */\r\n\t\t\thighlight: function highlight(container) {\r\n\t\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);\r\n\r\n\t\t\t\tfor (var i = 0, element; (element = elements[i++]);) {\r\n\t\t\t\t\tPrism.highlightElement(element);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar logged = false;\r\n\t\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\r\n\t\tPrism.fileHighlight = function () {\r\n\t\t\tif (!logged) {\r\n\t\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\r\n\t\t\t\tlogged = true;\r\n\t\t\t}\r\n\t\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);\r\n\t\t};\r\n\r\n\t}());\r\n\r\n\treturn skylark.attach(\"intg.prism\",Prism);\r\n});\r\n\ndefine('skylark-prism/main',[\r\n\t\"./prism\"\r\n],function(prism){\r\n\treturn prism;\r\n});\ndefine('skylark-prism', ['skylark-prism/main'], function (main) { return main; });\n\n"]}